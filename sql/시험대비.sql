SELECT COUNT(*) FROM ZIPCODE;
SELECT COUNT(*) FROM PRODUCT;
SELECT COUNT(*) FROM CUSTOMER;
SELECT COUNT(*) FROM ORDERS;
SELECT COUNT(*) FROM ORDER_ITEMS;


-- 2020년 12월에 주문된 것 중, 아직 배송이 완료되지 않은 제품 정보를 출력하시오
SELECT * FROM ORDERS WHERE ROWNUM <= 10;

SELECT * FROM ORDER_ITEMS WHERE ROWNUM <= 10;

SELECT * 
FROM ORDER_ITEMS I, ORDERS O 
WHERE I.ORDER_ID = O.ID 
AND O.STATUS IN (5, 6)
AND ROWNUM <= 10;


SELECT * 
FROM ORDER_ITEMS I, ORDERS O, PRODUCT P
WHERE I.ORDER_ID = O.ID
AND I.PRODUCT_ID = P.ID
AND O.STATUS IN (5, 6)
AND ROWNUM <= 10;






-- 가장 최근 주문 : 21/05/28

SELECT * 
FROM
    (SELECT * FROM ORDERS ORDER BY ORDER_DT DESC)
WHERE ROWNUM <= 10;

SELECT * 
FROM
    (SELECT * FROM ORDERS ORDER BY ORDER_DT DESC) S
WHERE ROWNUM <= 10;


-- 직원 MILLER가 담당하는 고객과 주문을 모두 구하시오.
-- SALES_EMPNO = 7934인 회원의 수를 구하시오?

SELECT * FROM CUSTOMER WHERE ROWNUM <= 10;

SELECT * FROM EMP WHERE EMPNO = 7934;




-- 직원 MILLER가 담당하는 고객
SELECT * FROM CUSTOMER 
WHERE ACCOUNT_MGR = (SELECT EMPNO FROM EMP WHERE ENAME = 'MILLER');



SELECT * FROM EMP;


-- 2021년 동안 총 주문금액이 가장 큰 고객을 구하시오

-- 2021년 동안 총 주문금액이 가장 큰 상품을 구하시오

SELECT PRODUCT.상품명, ORDER_ITEMS서브쿼리.상품 총 주문금액
FROM PRODUCT, ORDER_ITEMS서브쿼리
WHERE PRODUCT.ID = ORDER_ITEMS서브쿼리.PRODUCT_ID;


SELECT PRODUCT.ID, O.SUM
FROM PRODUCT, (
    SELECT * FROM (
        SELECT 
            PRODUCT_ID,
            SUM(NVL(UNIT_PRICE,0)) AS SUM , 
            RANK() OVER(ORDER BY (SUM(NVL(UNIT_PRICE,0))) DESC) AS RANK
        FROM ORDER_ITEMS
        GROUP BY PRODUCT_ID
        ORDER BY RANK
    ) O
    WHERE RANK = 1
)
WHERE PRODUCT.ID = O.PRODUCT_ID;





SELECT *
FROM ORDER_ITEMS
WHERE PRODUCT_ID = 1 AND ROWNUM <= 10;


SELECT PRODUCT_ID, SUM(UNIT_PRICE)
FROM ORDER_ITEMS
GROUP BY PRODUCT_ID;

SELECT * FROM (
    SELECT PRODUCT_ID, SUM, RANK() OVER(ORDER BY SUM DESC) AS RANK
    FROM (
        SELECT PRODUCT_ID, SUM(NVL(UNIT_PRICE,0)) AS SUM
        FROM ORDER_ITEMS
        GROUP BY PRODUCT_ID
    )
    ORDER BY RANK
)
WHERE RANK = 1;


SELECT * FROM (
    SELECT PRODUCT_ID, 
    SUM(NVL(UNIT_PRICE,0)) AS SUM,
    RANK() OVER(ORDER BY (SUM(NVL(UNIT_PRICE,0))) DESC) AS RANK
    FROM ORDER_ITEMS
    GROUP BY PRODUCT_ID
    ORDER BY RANK
)
WHERE RANK = 1;

SELECT * FROM (
    SELECT PRODUCT_ID, 
    SUM(NVL(UNIT_PRICE,0)) AS SUM,
    RANK() OVER(ORDER BY (SUM(NVL(UNIT_PRICE,0))) DESC) AS RANK
    FROM ORDER_ITEMS
    GROUP BY LINE_ITEM_ID, UNIT_PRICE
    ORDER BY RANK
)
WHERE RANK = 1;


-- 항목별 매출 1순위 제품
SELECT LINE_ITEM_ID, PRODUCT_ID, SUM(PRODUCT_ID) 
FROM ORDER_ITEMS 
GROUP BY LINE_ITEM_ID, PRODUCT_ID
ORDER BY LINE_ITEM_ID;

DESC ORDER_ITEMS;

SELECT * FROM(
    SELECT 
        LINE_ITEM_ID, 
        PRODUCT_ID, 
        SUM(NVL(UNIT_PRICE,0) * NVL(QUANTITY,0)) AS SUM, 
        RANK() OVER(ORDER BY SUM(NVL(UNIT_PRICE,0) * NVL(QUANTITY,0)) DESC) AS RANK
    FROM ORDER_ITEMS 
    GROUP BY (LINE_ITEM_ID, PRODUCT_ID)
    ORDER BY LINE_ITEM_ID
)
WHERE RANK = 1
AND ROWNUM <= 10;

-- 구매 확정된 제품
SELECT PRODUCT.ID, PRODUCT.NAME
FROM ORDERS, ORDER_ITEMS, PRODUCT
WHERE 
    ORDERS.ID = ORDER_ITEMS.ORDER_ID
AND 
    ORDER_ITEMS.PRODUCT_ID = PRODUCT.ID
AND 
    ORDERS.STATUS = 10
AND ORDERS.ORDER_DT >= '21/01/01';


-- 항목별 매출 1순위 제품
SELECT 
    ORDER_ITEMS.LINE_ITEM_ID, 
    ORDER_ITEMS.PRODUCT_ID, 
    MAX(PRODUCT.NAME), 
    SUM(
        NVL(ORDER_ITEMS.UNIT_PRICE,0) * NVL(ORDER_ITEMS.QUANTITY,0)
    ) AS SUM,
    RANK() OVER(ORDER BY (
        SUM(
            NVL(ORDER_ITEMS.UNIT_PRICE,0) * NVL(ORDER_ITEMS.QUANTITY,0)
        )
    ) DESC) AS RANK
FROM 
    ORDERS, ORDER_ITEMS, PRODUCT
WHERE 
    ORDERS.ID = ORDER_ITEMS.ORDER_ID
AND 
    ORDER_ITEMS.PRODUCT_ID = PRODUCT.ID
AND 
    ORDERS.STATUS = 10
AND ORDERS.ORDER_DT >= '21/01/01'
GROUP BY ORDER_ITEMS.LINE_ITEM_ID, ORDER_ITEMS.PRODUCT_ID;



-- 매출 1순위 제품
SELECT 
    ORDER_ITEMS.PRODUCT_ID, 
    MAX(PRODUCT.NAME), 
    SUM(
        NVL(ORDER_ITEMS.UNIT_PRICE,0) * NVL(ORDER_ITEMS.QUANTITY,0)
    ) AS SUM,
    RANK() OVER(ORDER BY (
        SUM(
            NVL(ORDER_ITEMS.UNIT_PRICE,0) * NVL(ORDER_ITEMS.QUANTITY,0)
        )
    ) DESC) AS RANK
FROM 
    ORDERS, ORDER_ITEMS, PRODUCT
WHERE 
    ORDERS.ID = ORDER_ITEMS.ORDER_ID
AND 
    ORDER_ITEMS.PRODUCT_ID = PRODUCT.ID
AND 
    ORDERS.STATUS = 10
AND ORDERS.ORDER_DT >= '21/01/01'
GROUP BY ORDER_ITEMS.PRODUCT_ID;



-- 매출 TOP 10 
SELECT * FROM 
(
SELECT 
    ORDER_ITEMS.PRODUCT_ID, 
    MAX(PRODUCT.NAME), 
    SUM(
        NVL(ORDER_ITEMS.UNIT_PRICE,0) * NVL(ORDER_ITEMS.QUANTITY,0)
    ) AS SUM,
    DENSE_RANK() OVER(ORDER BY (
        SUM(
            NVL(ORDER_ITEMS.UNIT_PRICE,0) * NVL(ORDER_ITEMS.QUANTITY,0)
        )
    ) DESC) AS RANK
FROM 
    ORDERS, ORDER_ITEMS, PRODUCT
WHERE 
    ORDERS.ID = ORDER_ITEMS.ORDER_ID
AND 
    ORDER_ITEMS.PRODUCT_ID = PRODUCT.ID
AND 
    ORDERS.STATUS = 10
AND ORDERS.ORDER_DT >= '21/01/01'
GROUP BY ORDER_ITEMS.PRODUCT_ID
)
WHERE RANK <= 10;





DESC PRODUCT;
DESC ORDER_ITEMS;
DESC ORDERS;


SELECT SUM(NVL(UNIT_PRICE,0) * NVL(QUANTITY,0)) 
FROM ORDER_ITEMS
GROUP BY PRODUCT_ID;

SELECT * FROM PRODUCT
WHERE ID = 1;

SELECT 



/*
ROWNUM 잘못 쓴 오류들

-- 가장 최근 주문 : 20/07/03
SELECT * FROM ORDERS WHERE ROWNUM <= 10 ORDER BY ORDER_DT DESC;

SELECT
    ORDER_DT,
    EXTRACT(YEAR FROM ORDER_DT) AS YEAR, 
    EXTRACT(MONTH FROM ORDER_DT) AS MONTH,  
    EXTRACT(DAY FROM ORDER_DT) AS DAY
FROM ORDERS WHERE ROWNUM <= 10
ORDER BY ORDER_DT DESC;

SELECT
    ORDER_DT,
    EXTRACT(YEAR FROM ORDER_DT) AS YEAR, 
    EXTRACT(MONTH FROM ORDER_DT) AS MONTH,  
    EXTRACT(DAY FROM ORDER_DT) AS DAY
FROM ORDERS WHERE ROWNUM <= 10
ORDER BY YEAR DESC, MONTH DESC;


-- 가장 최근 주문 : 20/12/08 20/07/03
SELECT * FROM ORDERS WHERE STATUS = 0 AND ROWNUM <= 10 ORDER BY ORDER_DT DESC;

SELECT
    ORDER_DT,
    EXTRACT(YEAR FROM ORDER_DT) AS YEAR, 
    EXTRACT(MONTH FROM ORDER_DT) AS MONTH,  
    EXTRACT(DAY FROM ORDER_DT) AS DAY
FROM ORDERS 
WHERE STATUS = 0 AND ROWNUM <= 10
ORDER BY ORDER_DT DESC;

SELECT
    ORDER_DT,
    EXTRACT(YEAR FROM ORDER_DT) AS YEAR, 
    EXTRACT(MONTH FROM ORDER_DT) AS MONTH,  
    EXTRACT(DAY FROM ORDER_DT) AS DAY
FROM ORDERS 
WHERE STATUS = 0 AND ROWNUM <= 10
ORDER BY YEAR DESC, MONTH DESC;
*/



